// TOD: npm run build -> not good.

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", error => {
    throw error;
});

/////////////////////////////////////

const chalk = require("chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const { choosePort, createCompiler, prepareUrls } = require("react-dev-utils/WebpackDevServerUtils");
const openBrowser = require("react-dev-utils/openBrowser");

const { devServerConfig } = require("../config");
const webpackConfig = require("../webpack/webpack.config.dev");
const createWebpackDevServerConfig = require("../webpack/webpack.dev-server.config");
const packageJson = require("../../package.json");

/////////////////////////////////////

choosePort(devServerConfig.host, devServerConfig.defaultPort)
    .then(port => {
        if (port == null) {
            return;
        }

        const serverConfig = createWebpackDevServerConfig(port);
        const urls = prepareUrls(serverConfig.https ? "https" : "http", serverConfig.host, serverConfig.port);

        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler(webpack, webpackConfig, packageJson.name, urls, false);

        // Serve webpack assets generated by the compiler over a web sever.
        const server = new WebpackDevServer(compiler, serverConfig);

        // Launch webpack dev server.
        server.listen(serverConfig.port, serverConfig.host, error => {
            if (error) {
                return console.log(error);
            }

            console.log(chalk.cyan("Starting the development server...\n"));

            if (devServerConfig.open !== false) {
                openBrowser(urls.localUrlForBrowser);
            }
        });

        // SIGINT = Interrupt from keyboard
        // SIGTERM = Termination signal
        ["SIGINT", "SIGTERM"].forEach(signal => {
            process.on(signal, function() {
                server.close();
                process.exit();
            });
        });
    })
    .catch(error => {
        if (error && error.message) {
            console.log(error.message);
        }

        process.exit(1);
    });


